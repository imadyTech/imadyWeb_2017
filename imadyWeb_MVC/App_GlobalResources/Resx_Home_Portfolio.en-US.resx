<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="Sec_Header_Intro" xml:space="preserve">
    <value />
  </data>
  <data name="Sec_Header_PreTitle" xml:space="preserve">
    <value>We learn and improve</value>
  </data>
  <data name="Sec_Header_Title" xml:space="preserve">
    <value>from the projects we have accomplished</value>
  </data>
  <data name="Sec_Project_01_Content" xml:space="preserve">
    <value>"Brokers Online" is a integrated Multi-level Marketing (MLM) management system developed by imady for Nanchang Tianrui Enterprises. It was comprised of admin desktop client and the WeChat mobile application, satisfied the need of integrated management included project management, resources management, workflow management, and social network promotion management. The project was multi-layer constructed and distributed deployed, base on high percentage of self-developed code. The system is featured with capacity scalability, and is easy to maintain and expand due to the clear structure. It has accumulatively matched business over RMB 700 million since it went live;</value>
  </data>
  <data name="Sec_Project_01_Date" xml:space="preserve">
    <value>Aug 1, 2015</value>
  </data>
  <data name="Sec_Project_01_Name" xml:space="preserve">
    <value>Tianrui - Brokers Online</value>
  </data>
  <data name="Sec_Project_02_Content" xml:space="preserve">
    <value>With 3D VR technologies add up with 720 degree Panorama technologies developed by imady, the ancient town with over 1,200 years history has a link with travelers all around world now.</value>
  </data>
  <data name="Sec_Project_02_Content1" xml:space="preserve">
    <value>Thanks to the motion control technology for mobile devices enabled Gyroscope, you are able to teleport yourself in the town, remotely. This infrastructural technology is also a foundation of VR which was getting extremely hot later on.</value>
  </data>
  <data name="Sec_Project_02_Date" xml:space="preserve">
    <value>Feb 10, 2014</value>
  </data>
  <data name="Sec_Project_02_Name" xml:space="preserve">
    <value>3D Virtual Tour for ancient town in Suzhou</value>
  </data>
  <data name="Sec_Project_03_Content" xml:space="preserve">
    <value>It helped junior operators to grasp a firsthand knowledge in a transforming station, reduce the risk of damaging by the high voltage up to 220kV. imady's expertise in 3D and Virtual Reality helped electricity industry customer to train new operators with higher efficiency and less danger.</value>
  </data>
  <data name="Sec_Project_03_Date" xml:space="preserve">
    <value>Feb 20, 2014</value>
  </data>
  <data name="Sec_Project_03_Name" xml:space="preserve">
    <value>Virtual Training System in High Voltage Transform Stations</value>
  </data>
  <data name="Sec_Project_04_Content" xml:space="preserve">
    <value>Town of Heavy Eater (ToHE) is a casual game that with mixed gameplay model of Social Construction and Tower Defense. In ToHE, you are able to build a customized virtual town with different styles of functional buildings. Beyond adoring the city you make, those buildings are really helpful to deal with the inflow big stomach eaters!</value>
  </data>
  <data name="Sec_Project_04_Date" xml:space="preserve">
    <value>July 1, 2012</value>
  </data>
  <data name="Sec_Project_04_Name" xml:space="preserve">
    <value>Town of Heavy Eaters (ToHE)</value>
  </data>
  <data name="Sec_Project_05_Content" xml:space="preserve">
    <value>Ququton is an application target to provide intelligent life and networking services for the thousands of communities all over China. The system was designed and powered by imady technological services in early stage, with high concurrency and high scalability cloud structure.</value>
  </data>
  <data name="Sec_Project_05_Date" xml:space="preserve">
    <value>Oct 31, 2016</value>
  </data>
  <data name="Sec_Project_05_Name" xml:space="preserve">
    <value>Ququton - Neighborhood Social Networking</value>
  </data>
  <data name="Title" xml:space="preserve">
    <value>imady - Portfolio</value>
  </data>
</root>